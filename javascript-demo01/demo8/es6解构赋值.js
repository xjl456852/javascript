/*
数组:
let [变量名1,变量名2,..] = [变量值1,变量值2,...]

默认赋值:
会按名称与值的顺序进行赋值.如果没有对应对的赋值,则为undefined.
后面变量值会覆盖前面定义的默认变量值.如果后面的是undefined则不会覆盖默认值.
let [变量名1=变量值1,变量名2,..] = [变量值1, 变量值2,...]

对象赋值:
let {变量名1,变量名2,...} = {变量名1:变量值1,变量名2:变量值2,...}

属性名和变量名不一致时,按下面的方式进行赋值
先找到同名的属性名,然后再将对应的变量值赋值给对应的变量名
下面的只会赋值变量名1,因为只有他是变量名. 变量名1的值=变量值1
let {属性名1:变量名1} = {属性名1:变量值1, 属性名2:变量值2,..}

跟数组的赋值类似,如果后面的变量值不是undefined,则会覆盖默认值
let {变量名1=默认变量值1} = {变量名1:变量值1}

 */
let [a,b,c] = [10,20,30]
console.log(a,b,c) //10 20 30

//后面的值不是undefined,所以覆盖了默认值
let [a1=3, b1] = [10]
console.log(a1) //10
console.log(b1) //undefined

//这时c2是undefined,他不会覆盖a2的默认值
let c2;
let [a2=10] = [c2]
console.log(a2); //10

//对象赋值

let {a3,b3} = {a3:100,b3:200}
console.log(a3) //100
console.log(b3) //200

console.log("---------")

//变量名与对象属性名不一致
//这里只会赋值aa,只有aa是变量
let {a5:aa} = {a5:100, b5:200,c5:300}
console.log(aa) //100
// console.log(a5) //a5 is not defined; a5不是变量.

// 对象中的默认值:
let {a6, b6=3} = {a6:100}
console.log(a6,b6) //100 3

//后面的undefined不会覆盖前面的默认值.
let b77
let {a7, b7=1} = {b7:b77}
console.log(a7,b7) //undefined 1